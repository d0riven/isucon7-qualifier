## 13:00 ~ (初期設定)

* 初回ベンチマーク実行 (score : 6271)
* 監視の追加 (score : 3914~4136)
    + mackerel
    + newrelic
* gitの追加やMakefileの作成など
* nginxのunixドメインソケット化(score : 6443)
* iconsのパーミッションでこけているのを修正した.(ユニックスドメインソケットでuserを変えたために起きた）
    + sudo chown -R isucon:isucon /var/lib/nginx/fastcgi

## 15:00 ~
* newrelicを見て,/icons/*, /fetch に時間がかかっているので/iconsから直すことにした
* icons/のDBの参照に時間がかかっているのでインデックス貼った (score : 6526)
    + ユニークインデックスを貼ろうとしたら落ちた。コードを見る限り１行しか取得しておらず、違和感を覚える。
    + disk ioは減ったがインデックス貼ったが行数が少ないためかあまり効果はなかった。
    + create index name_idx ON image (name);
* icons/をキャッシュに載せるように変更 (score : 7033)
    + phpredisの導入
    + まだキャッシュのpurgeが出来てないのでいくつか落ちているので追って修正
    + この時点で負荷の殆どはfetchが支配的になる
* icons/をキャッシュに載せるように変更 (score : 7230)
    + iconが更新されたときに対象のキャッシュをパージするように修正
* /fetchではhavereadをキャッシュから取得するようにした (score : 7046)
    + message, havereadの参照にかなりの時間がかかっていた
    + havereadは初期状態が空でinsertされてない状態から始まるのでまずはここをINSERT時にするようにしてみた
    + havereadの参照される時間は短くなったが逆にmessageの参照される時間が伸びたのでスコアは下がった
* /fetchのmessageを元に生成していた未読数をキャッシュ上に載せるようにした (score : 	10758)
    + messageのロジックを見ると未読数の生成を行っていた
    + 初回の未読数はチャンネル毎のメッセージ数をユーザ毎にキャッシュとして持たせた
    + チャンネル追加、メッセージ追加、ユーザの追加に合わせてキャッシュを追加するようにした
    + 未読数生成用のhavereadはキャッシュで完結するのでそもそも挿入しないようにした(サービスの冗長性的な意味ではやってはいけないけど、速度が大事なので気にしない）
